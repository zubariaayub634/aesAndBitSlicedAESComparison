package algosCompare;

import aes.AES;
import bitslicedAes.BitslicedAES;

public class AlgosCompare {
	public static void main(String[] args) {
		// plaintext and key of dimensions 16x16
		Integer[][] plainText = {
				{ 0x54, 0x4f, 0x4e, 0x20, 0x54, 0x4f, 0x4e, 0x20, 0x54, 0x4f, 0x4e, 0x20, 0x54, 0x4f, 0x4e, 0x20 },
				{ 0x77, 0x6e, 0x69, 0x54, 0x77, 0x6e, 0x69, 0x54, 0x77, 0x6e, 0x69, 0x54, 0x77, 0x6e, 0x69, 0x54 },
				{ 0x6F, 0x65, 0x6e, 0x77, 0x6F, 0x65, 0x6e, 0x77, 0x6F, 0x65, 0x6e, 0x77, 0x6F, 0x65, 0x6e, 0x77 },
				{ 0x20, 0x20, 0x65, 0x6f, 0x20, 0x20, 0x65, 0x6f, 0x20, 0x20, 0x65, 0x6f, 0x20, 0x20, 0x65, 0x6f },
				{ 0x54, 0x4f, 0x4e, 0x20, 0x54, 0x4f, 0x4e, 0x20, 0x54, 0x4f, 0x4e, 0x20, 0x54, 0x4f, 0x4e, 0x20 },
				{ 0x77, 0x6e, 0x69, 0x54, 0x77, 0x6e, 0x69, 0x54, 0x77, 0x6e, 0x69, 0x54, 0x77, 0x6e, 0x69, 0x54 },
				{ 0x6F, 0x65, 0x6e, 0x77, 0x6F, 0x65, 0x6e, 0x77, 0x6F, 0x65, 0x6e, 0x77, 0x6F, 0x65, 0x6e, 0x77 },
				{ 0x20, 0x20, 0x65, 0x6f, 0x20, 0x20, 0x65, 0x6f, 0x20, 0x20, 0x65, 0x6f, 0x20, 0x20, 0x65, 0x6f },
				{ 0x54, 0x4f, 0x4e, 0x20, 0x54, 0x4f, 0x4e, 0x20, 0x54, 0x4f, 0x4e, 0x20, 0x54, 0x4f, 0x4e, 0x20 },
				{ 0x77, 0x6e, 0x69, 0x54, 0x77, 0x6e, 0x69, 0x54, 0x77, 0x6e, 0x69, 0x54, 0x77, 0x6e, 0x69, 0x54 },
				{ 0x6F, 0x65, 0x6e, 0x77, 0x6F, 0x65, 0x6e, 0x77, 0x6F, 0x65, 0x6e, 0x77, 0x6F, 0x65, 0x6e, 0x77 },
				{ 0x20, 0x20, 0x65, 0x6f, 0x20, 0x20, 0x65, 0x6f, 0x20, 0x20, 0x65, 0x6f, 0x20, 0x20, 0x65, 0x6f },
				{ 0x54, 0x4f, 0x4e, 0x20, 0x54, 0x4f, 0x4e, 0x20, 0x54, 0x4f, 0x4e, 0x20, 0x54, 0x4f, 0x4e, 0x20 },
				{ 0x77, 0x6e, 0x69, 0x54, 0x77, 0x6e, 0x69, 0x54, 0x77, 0x6e, 0x69, 0x54, 0x77, 0x6e, 0x69, 0x54 },
				{ 0x6F, 0x65, 0x6e, 0x77, 0x6F, 0x65, 0x6e, 0x77, 0x6F, 0x65, 0x6e, 0x77, 0x6F, 0x65, 0x6e, 0x77 },
				{ 0x20, 0x20, 0x65, 0x6f, 0x20, 0x20, 0x65, 0x6f, 0x20, 0x20, 0x65, 0x6f, 0x20, 0x20, 0x65, 0x6f } };
		Integer[][] key = {
				{ 0x54, 0x73, 0x20, 0x67, 0x54, 0x73, 0x20, 0x67, 0x54, 0x73, 0x20, 0x67, 0x54, 0x73, 0x20, 0x67 },
				{ 0x68, 0x20, 0x4b, 0x20, 0x68, 0x20, 0x4b, 0x20, 0x68, 0x20, 0x4b, 0x20, 0x68, 0x20, 0x4b, 0x20 },
				{ 0x61, 0x6d, 0x75, 0x46, 0x61, 0x6d, 0x75, 0x46, 0x61, 0x6d, 0x75, 0x46, 0x61, 0x6d, 0x75, 0x46 },
				{ 0x74, 0x79, 0x6e, 0x75, 0x74, 0x79, 0x6e, 0x75, 0x74, 0x79, 0x6e, 0x75, 0x74, 0x79, 0x6e, 0x75 },
				{ 0x54, 0x73, 0x20, 0x67, 0x54, 0x73, 0x20, 0x67, 0x54, 0x73, 0x20, 0x67, 0x54, 0x73, 0x20, 0x67 },
				{ 0x68, 0x20, 0x4b, 0x20, 0x68, 0x20, 0x4b, 0x20, 0x68, 0x20, 0x4b, 0x20, 0x68, 0x20, 0x4b, 0x20 },
				{ 0x61, 0x6d, 0x75, 0x46, 0x61, 0x6d, 0x75, 0x46, 0x61, 0x6d, 0x75, 0x46, 0x61, 0x6d, 0x75, 0x46 },
				{ 0x74, 0x79, 0x6e, 0x75, 0x74, 0x79, 0x6e, 0x75, 0x74, 0x79, 0x6e, 0x75, 0x74, 0x79, 0x6e, 0x75 },
				{ 0x54, 0x73, 0x20, 0x67, 0x54, 0x73, 0x20, 0x67, 0x54, 0x73, 0x20, 0x67, 0x54, 0x73, 0x20, 0x67 },
				{ 0x68, 0x20, 0x4b, 0x20, 0x68, 0x20, 0x4b, 0x20, 0x68, 0x20, 0x4b, 0x20, 0x68, 0x20, 0x4b, 0x20 },
				{ 0x61, 0x6d, 0x75, 0x46, 0x61, 0x6d, 0x75, 0x46, 0x61, 0x6d, 0x75, 0x46, 0x61, 0x6d, 0x75, 0x46 },
				{ 0x74, 0x79, 0x6e, 0x75, 0x74, 0x79, 0x6e, 0x75, 0x74, 0x79, 0x6e, 0x75, 0x74, 0x79, 0x6e, 0x75 },
				{ 0x54, 0x73, 0x20, 0x67, 0x54, 0x73, 0x20, 0x67, 0x54, 0x73, 0x20, 0x67, 0x54, 0x73, 0x20, 0x67 },
				{ 0x68, 0x20, 0x4b, 0x20, 0x68, 0x20, 0x4b, 0x20, 0x68, 0x20, 0x4b, 0x20, 0x68, 0x20, 0x4b, 0x20 },
				{ 0x61, 0x6d, 0x75, 0x46, 0x61, 0x6d, 0x75, 0x46, 0x61, 0x6d, 0x75, 0x46, 0x61, 0x6d, 0x75, 0x46 },
				{ 0x74, 0x79, 0x6e, 0x75, 0x74, 0x79, 0x6e, 0x75, 0x74, 0x79, 0x6e, 0x75, 0x74, 0x79, 0x6e, 0x75 } };

		final int experimentCount = 10;
		long totalAesTimes = 0;
		long totalBitSlicedAesTimes = 0;

		for (int i = 0; i < experimentCount; i++) {

			long aesStartTime = System.nanoTime();
			AES aes = new AES();
			aes.encrypt(plainText, key);
			long aesEndTime = System.nanoTime();

			totalAesTimes += aesEndTime - aesStartTime;

			long bitSlicedAesStartTime = System.nanoTime();
			BitslicedAES bitslicedAES = new BitslicedAES();
			bitslicedAES.encrypt(plainText, key);
			long bitSlicedAesEndTime = System.nanoTime();

			totalBitSlicedAesTimes += bitSlicedAesEndTime - bitSlicedAesStartTime;
		}

		System.out.println("Average AES time in nanoseconds:           " + (totalAesTimes / experimentCount));
		System.out.println("Average BitSliced AES time in nanoseconds: " + (totalBitSlicedAesTimes / experimentCount));
	}
}
